digraph uml{rankdir=BT;splines=ortho;node[shape = box];ClassNode->ClassVisitor [arrowhead="onormal"];ClassNode[shape = "record",label=<{ ClassNode|+ version : int<br/>+ access : int<br/>+ name : String<br/>+ signature : String<br/>+ superName : String<br/>+ interfaces : List<br/>+ sourceFile : String<br/>+ sourceDebug : String<br/>+ outerClass : String<br/>+ outerMethod : String<br/>+ outerMethodDesc : String<br/>+ visibleAnnotations : List<br/>+ invisibleAnnotations : List<br/>+ visibleTypeAnnotations : List<br/>+ invisibleTypeAnnotations : List<br/>+ attrs : List<br/>+ innerClasses : List<br/>+ fields : List<br/>+ methods : List<br/>- classorgobjectwebasmtreeClassNode : Class<br/>|+ init() : void<br/>+ init(int param, ) : void<br/>+ visit(int param, int param, String param, String param, String param, String[] param, ) : void<br/>+ visitSource(String param, String param, ) : void<br/>+ visitOuterClass(String param, String param, String param, ) : void<br/>+ visitAnnotation(String param, boolean param, ) : AnnotationVisitor<br/>+ visitTypeAnnotation(int param, TypePath param, String param, boolean param, ) : AnnotationVisitor<br/>+ visitAttribute(Attribute param, ) : void<br/>+ visitInnerClass(String param, String param, String param, int param, ) : void<br/>+ visitField(int param, String param, String param, String param, Object param, ) : FieldVisitor<br/>+ visitMethod(int param, String param, String param, String param, String[] param, ) : MethodVisitor<br/>+ visitEnd() : void<br/>+ check(int param, ) : void<br/>+ accept(ClassVisitor param, ) : void<br/>- class(String param, ) : Class<br/>- clinit() : void<br/>}>];ClassVisitor[shape = "record",label=<{ <i>ClassVisitor</i>|- api : int<br/>- cv : ClassVisitor<br/>|+ init(int param, ) : void<br/>+ init(int param, ClassVisitor param, ) : void<br/>+ visit(int param, int param, String param, String param, String param, String[] param, ) : void<br/>+ visitSource(String param, String param, ) : void<br/>+ visitOuterClass(String param, String param, String param, ) : void<br/>+ visitAnnotation(String param, boolean param, ) : AnnotationVisitor<br/>+ visitTypeAnnotation(int param, TypePath param, String param, boolean param, ) : AnnotationVisitor<br/>+ visitAttribute(Attribute param, ) : void<br/>+ visitInnerClass(String param, String param, String param, int param, ) : void<br/>+ visitField(int param, String param, String param, String param, Object param, ) : FieldVisitor<br/>+ visitMethod(int param, String param, String param, String param, String[] param, ) : MethodVisitor<br/>+ visitEnd() : void<br/>}>];ClassVisitor->ClassVisitor [arrowhead="vee"];ClassNode->ClassNode [color=magenta arrowhead="vee",style="dashed"];ClassNode->ClassVisitor [arrowhead="vee",style="dashed"];ClassNode->AnnotationVisitor [arrowhead="vee",style="dashed"];ClassNode->AnnotationNode [arrowhead="vee",style="dashed"];ClassNode->TypePath [arrowhead="vee",style="dashed"];ClassNode->TypeAnnotationNode [arrowhead="vee",style="dashed"];ClassNode->Attribute [arrowhead="vee",style="dashed"];ClassNode->InnerClassNode [arrowhead="vee",style="dashed"];ClassNode->FieldVisitor [arrowhead="vee",style="dashed"];ClassNode->FieldNode [arrowhead="vee",style="dashed"];ClassNode->MethodVisitor [arrowhead="vee",style="dashed"];ClassNode->MethodNode [arrowhead="vee",style="dashed"];ClassVisitor->AnnotationVisitor [arrowhead="vee",style="dashed"];ClassVisitor->TypePath [arrowhead="vee",style="dashed"];ClassVisitor->Attribute [arrowhead="vee",style="dashed"];ClassVisitor->FieldVisitor [arrowhead="vee",style="dashed"];ClassVisitor->MethodVisitor [arrowhead="vee",style="dashed"];}