digraph uml{rankdir=BT;splines=ortho;concentrate=true;node[shape = box];DesignParser[shape = "record",label=<{ DesignParser|+ TYPE_HTML : String<br/>- factories : Map:String IParserFactory<br/>- iFactory : IParserFactory<br/>|+ init() : void<br/>+ parseObjects(List:ModelObject param, ) : String<br/>- parseModelObject(ModelObject param, ) : String<br/>+ addFactory(String param, IParserFactory param, ) : void<br/>+ setFactory(String param, ) : void<br/>- clinit() : void<br/>}>];Driver[shape = "record",label=<{ Driver|+ init() : void<br/>+ main(String[] param, ) : void<br/>}>];Modeler[shape = "record",label=<{ Modeler|- models : List:ModelObject<br/>- recursion : boolean<br/>- primitives : List:String<br/>- pds : List:PatternDetector<br/>- synthetic : boolean<br/>- blacklist : String[]<br/>|+ init() : void<br/>- createClassModel(String param, ) : void<br/>+ createClassModels(List:String param, ) : void<br/>- checkBlackList(String param, ) : boolean<br/>- checkIfParsed(String param, ) : boolean<br/>- getTypes(String param, ) : List:String<br/>- containsAssociation(Association param, List:ModelObject param, ) : boolean<br/>- containsDependency(Dependency param, List:ModelObject param, ) : boolean<br/>- getAssociations() : void<br/>- checkAssociations(String param, String param, ) : boolean<br/>- getDependencies() : void<br/>- createInstanceVariableModels(List:FieldNode param, ) : List:ModelObject<br/>- createMethodModels(List:MethodNode param, ) : List:ModelObject<br/>+ setRecursion(boolean param, ) : void<br/>+ setSynthetic(boolean param, ) : void<br/>+ setBlacklist(String[] param, ) : void<br/>+ getModels() : List:ModelObject<br/>+ addPatternDetector(PatternDetector param, ) : void<br/>- detectPatterns() : void<br/>- parseParamGeneric(String param, ) : List:String<br/>- parseGeneric(String param, ) : String<br/>+ getRecursion() : boolean<br/>+ getBlacklist() : String[]<br/>+ getSynthetic() : boolean<br/>+ getPatternDetectors() : List:PatternDetector<br/>}>];TheGreatFacadeOfChandan[shape = "record",label=<{ TheGreatFacadeOfChandan|- runner : Runner<br/>- designParser : DesignParser<br/>- modeler : Modeler<br/>+ DEFAULT_SETTINGS : String<br/>- names : List:String<br/>- outputFile : String<br/>- encoding : String<br/>|+ init() : void<br/>+ initialize(String param, ) : void<br/>+ addPatternDetector(PatternDetector param, ) : void<br/>+ go() : void<br/>+ setOutputFile(String param, ) : void<br/>+ setEncoding(String param, ) : void<br/>+ getModeler() : Modeler<br/>+ getNames() : List:String<br/>+ getOutputFile() : String<br/>+ getEncoding() : String<br/>- clinit() : void<br/>}>];AbstractParserFactory->IParserFactory [arrowhead="onormal",style="dashed"];AbstractParserFactory[shape = "record",label=<{ <i>AbstractParserFactory</i>|- map : Map:String IParser<br/>|+ init() : void<br/>+ makeParser(String param, ) : IParser<br/>+ addParser(String param, IParser param, ) : void<br/>}>];HTMLParserFactory->AbstractParserFactory [arrowhead="onormal"];IParserFactory[shape = "record",label=<{<i>IParserFactory</i>|+ makeParser(String param, ) : IParser<br/>}>];Association->IRelationship [arrowhead="onormal"];Association[shape = "record",label=<{ <i>Association</i>|+ init(String param, String param, ) : void<br/>+ isOpposite(Association param, ) : boolean<br/>+ isEqual(Object param, ) : boolean<br/>}>];Dependency->IRelationship [arrowhead="onormal"];Dependency[shape = "record",label=<{ <i>Dependency</i>|+ init(String param, String param, ) : void<br/>+ isOpposite(Dependency param, ) : boolean<br/>+ isEqual(ModelObject param, ) : boolean<br/>}>];Extend->IRelationship [arrowhead="onormal"];Extend[shape = "record",label=<{ Extend|+ init(String param, String param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];Implement->IRelationship [arrowhead="onormal"];Implement[shape = "record",label=<{ Implement|+ init(String param, String param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];IRelationship->ModelObject [arrowhead="onormal",style="dashed"];IRelationship[shape = "record",label=<{ <i>IRelationship</i>|- pair : String[]<br/>|+ init(String param, String param, ) : void<br/>+ getFirst() : String<br/>+ getSecond() : String<br/>+ toString() : String<br/>}>];ModelObject[shape = "record",label=<{<i>ModelObject</i>|+ toString() : String<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];OneToManyAssociation->Association [arrowhead="onormal"];OneToManyAssociation[shape = "record",label=<{ OneToManyAssociation|+ init(String param, String param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];OneToManyDependency->Dependency [arrowhead="onormal"];OneToManyDependency[shape = "record",label=<{ OneToManyDependency|+ init(String param, String param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];OneToOneAssociation->Association [arrowhead="onormal"];OneToOneAssociation[shape = "record",label=<{ OneToOneAssociation|+ init(String param, String param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];OneToOneDependency->Dependency [arrowhead="onormal"];OneToOneDependency[shape = "record",label=<{ OneToOneDependency|+ init(String param, String param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];PatternDecorator->ModelObject [arrowhead="onormal",style="dashed"];PatternDecorator[shape = "record",label=<{ <i>PatternDecorator</i>|- underlying : ModelObject<br/>|+ init() : void<br/>+ getName() : String<br/>+ getUnderlying() : ModelObject<br/>}>];Singleton->PatternDecorator [arrowhead="onormal"];Singleton[shape = "record",label=<{ Singleton|+ init(ModelObject param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];UMLAbstractClass->ModelObject [arrowhead="onormal",style="dashed"];UMLAbstractClass[shape = "record",label=<{ UMLAbstractClass|- methods : List:UMLMethod<br/>- instVars : List:UMLInstanceVariable<br/>- name : String<br/>|+ init(String param, List:UMLMethod param, List:UMLInstanceVariable param, ) : void<br/>+ getMethods() : List:UMLMethod<br/>+ getInstanceVars() : List:UMLInstanceVariable<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];UMLClass->ModelObject [arrowhead="onormal",style="dashed"];UMLClass[shape = "record",label=<{ UMLClass|- methods : List:UMLMethod<br/>- instVars : List:UMLInstanceVariable<br/>- name : String<br/>|+ init(String param, List:UMLMethod param, List:UMLInstanceVariable param, ) : void<br/>+ getMethods() : List:UMLMethod<br/>+ getInstanceVars() : List:UMLInstanceVariable<br/>+ addMethod(UMLMethod param, ) : void<br/>+ toString() : String<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];UMLInstanceVariable->ModelObject [arrowhead="onormal",style="dashed"];UMLInstanceVariable[shape = "record",label=<{ UMLInstanceVariable|- type : String<br/>- name : String<br/>- isPublic : boolean<br/>- isStatic : boolean<br/>|+ init(String param, String param, boolean param, boolean param, ) : void<br/>+ getName() : String<br/>+ getType() : String<br/>+ toString() : String<br/>+ getIsPublic() : boolean<br/>+ getIsStatic() : boolean<br/>+ getSelector() : String<br/>}>];UMLInterface->ModelObject [arrowhead="onormal",style="dashed"];UMLInterface[shape = "record",label=<{ UMLInterface|- methods : List:UMLMethod<br/>- name : String<br/>|+ init(String param, List:UMLMethod param, ) : void<br/>+ getMethods() : List:UMLMethod<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];UMLKeyWord[shape = "record",label=<{<i>UMLKeyWord</i>|+ getUMLSyntax() : String<br/>}>];UMLMethod->ModelObject [arrowhead="onormal",style="dashed"];UMLMethod[shape = "record",label=<{ UMLMethod|- sig : String<br/>- returnType : String<br/>- params : List:UMLParameter<br/>- isPublic : boolean<br/>- isStatic : boolean<br/>|+ init(String param, String param, List:UMLParameter param, ) : void<br/>+ getSignature() : String<br/>+ getReturnType() : String<br/>+ getParameters() : List:UMLParameter<br/>+ toString() : String<br/>+ getName() : String<br/>+ getIsPublic() : boolean<br/>+ getIsStatic() : boolean<br/>+ getSelector() : String<br/>}>];UMLParameter->ModelObject [arrowhead="onormal",style="dashed"];UMLParameter[shape = "record",label=<{ UMLParameter|- type : String<br/>- name : String<br/>|+ init(String param, String param, ) : void<br/>+ toString() : String<br/>+ getName() : String<br/>+ getType() : String<br/>+ getSelector() : String<br/>}>];ViolateCompositionOverInheritance->PatternDecorator [arrowhead="onormal"];ViolateCompositionOverInheritance[shape = "record",label=<{ ViolateCompositionOverInheritance|+ init(ModelObject param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];Vizable[shape = "record",label=<{<i>Vizable</i>|+ toGraphViz() : String<br/>}>];ClassParserDecorator->IParser [arrowhead="onormal",style="dashed"];ClassParserDecorator[shape = "record",label=<{ <i>ClassParserDecorator</i>|- underlying : IParser<br/>|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>+ addConfig() : String<br/>+ addHeader() : String<br/>}>];HTMLAbstractClassParser->IParser [arrowhead="onormal",style="dashed"];HTMLAbstractClassParser[shape = "record",label=<{ HTMLAbstractClassParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLClassParser->IParser [arrowhead="onormal",style="dashed"];HTMLClassParser[shape = "record",label=<{ HTMLClassParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLExtendParser->IParser [arrowhead="onormal",style="dashed"];HTMLExtendParser[shape = "record",label=<{ HTMLExtendParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLImplementParser->IParser [arrowhead="onormal",style="dashed"];HTMLImplementParser[shape = "record",label=<{ HTMLImplementParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLInstanceVariableParser->IParser [arrowhead="onormal",style="dashed"];HTMLInstanceVariableParser[shape = "record",label=<{ HTMLInstanceVariableParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLInterfaceParser->IParser [arrowhead="onormal",style="dashed"];HTMLInterfaceParser[shape = "record",label=<{ HTMLInterfaceParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLMethodParser->IParser [arrowhead="onormal",style="dashed"];HTMLMethodParser[shape = "record",label=<{ HTMLMethodParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLOneToManyAssociationParser->IParser [arrowhead="onormal",style="dashed"];HTMLOneToManyAssociationParser[shape = "record",label=<{ HTMLOneToManyAssociationParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLOneToManyDependencyParser->IParser [arrowhead="onormal",style="dashed"];HTMLOneToManyDependencyParser[shape = "record",label=<{ HTMLOneToManyDependencyParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLOneToOneAssociationParser->IParser [arrowhead="onormal",style="dashed"];HTMLOneToOneAssociationParser[shape = "record",label=<{ HTMLOneToOneAssociationParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLOneToOneDependencyParser->IParser [arrowhead="onormal",style="dashed"];HTMLOneToOneDependencyParser[shape = "record",label=<{ HTMLOneToOneDependencyParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLParameterParser->IParser [arrowhead="onormal",style="dashed"];HTMLParameterParser[shape = "record",label=<{ HTMLParameterParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLSingletonParser->ClassParserDecorator [arrowhead="onormal"];HTMLSingletonParser[shape = "record",label=<{ HTMLSingletonParser|+ init(IParser param, ) : void<br/>+ addConfig() : String<br/>+ addHeader() : String<br/>}>];HTMLViolateCompositionOverInheritanceClassParser->ClassParserDecorator [arrowhead="onormal"];HTMLViolateCompositionOverInheritanceClassParser[shape = "record",label=<{ HTMLViolateCompositionOverInheritanceClassParser|+ init(IParser param, ) : void<br/>+ addConfig() : String<br/>+ addHeader() : String<br/>}>];HTMLViolateCompositionOverInheritanceRelationshipParser->RelationshipParserDecorator [arrowhead="onormal"];HTMLViolateCompositionOverInheritanceRelationshipParser[shape = "record",label=<{ HTMLViolateCompositionOverInheritanceRelationshipParser|+ init(IParser param, ) : void<br/>+ addConfig() : String<br/>}>];IParser[shape = "record",label=<{<i>IParser</i>|+ parse(ModelObject param, ) : String<br/>}>];RelationshipParserDecorator->IParser [arrowhead="onormal",style="dashed"];RelationshipParserDecorator[shape = "record",label=<{ <i>RelationshipParserDecorator</i>|- underlying : IParser<br/>|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>+ addConfig() : String<br/>}>];GraphVizRunner->Runner [arrowhead="onormal",style="dashed"];GraphVizRunner[shape = "record",label=<{ GraphVizRunner|- inputFile : String<br/>|+ init(String param, ) : void<br/>+ launchApp() : void<br/>+ writeToFile(String param, ) : int<br/>}>];Runner[shape = "record",label=<{<i>Runner</i>|+ launchApp() : void<br/>+ writeToFile(String param, ) : int<br/>}>];PatternDetector[shape = "record",label=<{<i>PatternDetector</i>|+ check(List:ModelObject param, ) : List:ModelObject<br/>}>];SingletonDetector->PatternDetector [arrowhead="onormal",style="dashed"];SingletonDetector[shape = "record",label=<{ SingletonDetector|+ init() : void<br/>+ check(List:ModelObject param, ) : List:ModelObject<br/>}>];ViolateCompositionOverInheritanceDetector->PatternDetector [arrowhead="onormal",style="dashed"];ViolateCompositionOverInheritanceDetector[shape = "record",label=<{ ViolateCompositionOverInheritanceDetector|+ init() : void<br/>+ check(List:ModelObject param, ) : List:ModelObject<br/>- getWrappedObjects(ModelObject param, List:ModelObject param, ) : List:ModelObject<br/>- checkViolate(String param, List:ModelObject param, ) : boolean<br/>}>];ObjectOne[shape = "record",label=<{ ObjectOne|+ init() : void<br/>+ blah() : void<br/>}>];ObjectOne[color=orange,shape = "record",label=<{ ObjectOne|+ init() : void<br/>+ blah() : void<br/>}>];ObjectTwo[color=orange,shape = "record",label=<{ ObjectTwo|+ init() : void<br/>+ get() : void<br/>}>];ObjectTwo->ObjectOne [color=orange arrowhead="onormal"];ObjectTwo[shape = "record",label=<{ ObjectTwo|+ init() : void<br/>+ get() : void<br/>}>];DesignParser->String [arrowhead="vee"];DesignParser->IParserFactory [arrowhead="vee",label="1..n"];Modeler->ModelObject [arrowhead="vee",label="1..n"];Modeler->boolean [arrowhead="vee"];Modeler->String [arrowhead="vee",label="1..n"];Modeler->PatternDetector [arrowhead="vee",label="1..n"];Modeler->String[] [arrowhead="vee"];TheGreatFacadeOfChandan->Runner [arrowhead="vee"];TheGreatFacadeOfChandan->DesignParser [arrowhead="vee"];TheGreatFacadeOfChandan->Modeler [arrowhead="vee"];TheGreatFacadeOfChandan->String [arrowhead="vee"];AbstractParserFactory->String [arrowhead="vee",label="1..n"];AbstractParserFactory->IParser [arrowhead="vee",label="1..n"];HTMLParserFactory->HTMLParserFactory [arrowhead="vee"];IRelationship->String[] [arrowhead="vee"];PatternDecorator->ModelObject [arrowhead="vee"];UMLAbstractClass->UMLMethod [arrowhead="vee",label="1..n"];UMLAbstractClass->UMLInstanceVariable [arrowhead="vee",label="1..n"];UMLAbstractClass->String [arrowhead="vee"];UMLClass->UMLMethod [arrowhead="vee",label="1..n"];UMLClass->UMLInstanceVariable [arrowhead="vee",label="1..n"];UMLClass->String [arrowhead="vee"];UMLInstanceVariable->String [arrowhead="vee"];UMLInstanceVariable->boolean [arrowhead="vee"];UMLInterface->UMLMethod [arrowhead="vee",label="1..n"];UMLInterface->String [arrowhead="vee"];UMLMethod->String [arrowhead="vee"];UMLMethod->UMLParameter [arrowhead="vee",label="1..n"];UMLMethod->boolean [arrowhead="vee"];UMLParameter->String [arrowhead="vee"];ClassParserDecorator->IParser [arrowhead="vee"];RelationshipParserDecorator->IParser [arrowhead="vee"];GraphVizRunner->String [arrowhead="vee"];EagerBoiler->EagerBoiler [arrowhead="vee"];LazyBoiler->LazyBoiler [arrowhead="vee"];DesignParser->void [arrowhead="vee",style="dashed"];DesignParser->ModelObject [arrowhead="vee",style="dashed",label="1..n"];Driver->void [arrowhead="vee",style="dashed"];Driver->String [arrowhead="vee",style="dashed",label="1..n"];Modeler->void [arrowhead="vee",style="dashed"];Modeler->Association [arrowhead="vee",style="dashed"];Modeler->Dependency [arrowhead="vee",style="dashed"];Modeler->FieldNode [arrowhead="vee",style="dashed",label="1..n"];Modeler->MethodNode [arrowhead="vee",style="dashed",label="1..n"];TheGreatFacadeOfChandan->void [arrowhead="vee",style="dashed"];TheGreatFacadeOfChandan->PatternDetector [arrowhead="vee",style="dashed"];AbstractParserFactory->void [arrowhead="vee",style="dashed"];HTMLParserFactory->void [arrowhead="vee",style="dashed"];HTMLParserFactory->IParser [arrowhead="vee",style="dashed"];HTMLParserFactory->String [arrowhead="vee",style="dashed"];IParserFactory->IParser [arrowhead="vee",style="dashed"];IParserFactory->String [arrowhead="vee",style="dashed"];Association->void [arrowhead="vee",style="dashed"];Association->String [arrowhead="vee",style="dashed"];Association->boolean [arrowhead="vee",style="dashed"];Association->Association [arrowhead="vee",style="dashed"];Association->Object [arrowhead="vee",style="dashed"];Dependency->void [arrowhead="vee",style="dashed"];Dependency->String [arrowhead="vee",style="dashed"];Dependency->boolean [arrowhead="vee",style="dashed"];Dependency->Dependency [arrowhead="vee",style="dashed"];Dependency->ModelObject [arrowhead="vee",style="dashed"];Extend->void [arrowhead="vee",style="dashed"];Extend->String [arrowhead="vee",style="dashed"];Implement->void [arrowhead="vee",style="dashed"];Implement->String [arrowhead="vee",style="dashed"];IRelationship->void [arrowhead="vee",style="dashed"];IRelationship->String [arrowhead="vee",style="dashed"];ModelObject->String [arrowhead="vee",style="dashed"];OneToManyAssociation->void [arrowhead="vee",style="dashed"];OneToManyAssociation->String [arrowhead="vee",style="dashed"];OneToManyDependency->void [arrowhead="vee",style="dashed"];OneToManyDependency->String [arrowhead="vee",style="dashed"];OneToOneAssociation->void [arrowhead="vee",style="dashed"];OneToOneAssociation->String [arrowhead="vee",style="dashed"];OneToOneDependency->void [arrowhead="vee",style="dashed"];OneToOneDependency->String [arrowhead="vee",style="dashed"];PatternDecorator->void [arrowhead="vee",style="dashed"];PatternDecorator->String [arrowhead="vee",style="dashed"];Singleton->void [arrowhead="vee",style="dashed"];Singleton->ModelObject [arrowhead="vee",style="dashed"];Singleton->String [arrowhead="vee",style="dashed"];UMLAbstractClass->void [arrowhead="vee",style="dashed"];UMLClass->void [arrowhead="vee",style="dashed"];UMLInstanceVariable->void [arrowhead="vee",style="dashed"];UMLInterface->void [arrowhead="vee",style="dashed"];UMLKeyWord->String [arrowhead="vee",style="dashed"];UMLMethod->void [arrowhead="vee",style="dashed"];UMLParameter->void [arrowhead="vee",style="dashed"];ViolateCompositionOverInheritance->void [arrowhead="vee",style="dashed"];ViolateCompositionOverInheritance->ModelObject [arrowhead="vee",style="dashed"];ViolateCompositionOverInheritance->String [arrowhead="vee",style="dashed"];Vizable->String [arrowhead="vee",style="dashed"];ClassParserDecorator->void [arrowhead="vee",style="dashed"];ClassParserDecorator->String [arrowhead="vee",style="dashed"];ClassParserDecorator->ModelObject [arrowhead="vee",style="dashed"];HTMLAbstractClassParser->void [arrowhead="vee",style="dashed"];HTMLAbstractClassParser->String [arrowhead="vee",style="dashed"];HTMLAbstractClassParser->ModelObject [arrowhead="vee",style="dashed"];HTMLClassParser->void [arrowhead="vee",style="dashed"];HTMLClassParser->String [arrowhead="vee",style="dashed"];HTMLClassParser->ModelObject [arrowhead="vee",style="dashed"];HTMLExtendParser->void [arrowhead="vee",style="dashed"];HTMLExtendParser->String [arrowhead="vee",style="dashed"];HTMLExtendParser->ModelObject [arrowhead="vee",style="dashed"];HTMLImplementParser->void [arrowhead="vee",style="dashed"];HTMLImplementParser->String [arrowhead="vee",style="dashed"];HTMLImplementParser->ModelObject [arrowhead="vee",style="dashed"];HTMLInstanceVariableParser->void [arrowhead="vee",style="dashed"];HTMLInstanceVariableParser->String [arrowhead="vee",style="dashed"];HTMLInstanceVariableParser->ModelObject [arrowhead="vee",style="dashed"];HTMLInterfaceParser->void [arrowhead="vee",style="dashed"];HTMLInterfaceParser->String [arrowhead="vee",style="dashed"];HTMLInterfaceParser->ModelObject [arrowhead="vee",style="dashed"];HTMLMethodParser->void [arrowhead="vee",style="dashed"];HTMLMethodParser->String [arrowhead="vee",style="dashed"];HTMLMethodParser->ModelObject [arrowhead="vee",style="dashed"];HTMLOneToManyAssociationParser->void [arrowhead="vee",style="dashed"];HTMLOneToManyAssociationParser->String [arrowhead="vee",style="dashed"];HTMLOneToManyAssociationParser->ModelObject [arrowhead="vee",style="dashed"];HTMLOneToManyDependencyParser->void [arrowhead="vee",style="dashed"];HTMLOneToManyDependencyParser->String [arrowhead="vee",style="dashed"];HTMLOneToManyDependencyParser->ModelObject [arrowhead="vee",style="dashed"];HTMLOneToOneAssociationParser->void [arrowhead="vee",style="dashed"];HTMLOneToOneAssociationParser->String [arrowhead="vee",style="dashed"];HTMLOneToOneAssociationParser->ModelObject [arrowhead="vee",style="dashed"];HTMLOneToOneDependencyParser->void [arrowhead="vee",style="dashed"];HTMLOneToOneDependencyParser->String [arrowhead="vee",style="dashed"];HTMLOneToOneDependencyParser->ModelObject [arrowhead="vee",style="dashed"];HTMLParameterParser->void [arrowhead="vee",style="dashed"];HTMLParameterParser->String [arrowhead="vee",style="dashed"];HTMLParameterParser->ModelObject [arrowhead="vee",style="dashed"];HTMLSingletonParser->void [arrowhead="vee",style="dashed"];HTMLSingletonParser->IParser [arrowhead="vee",style="dashed"];HTMLSingletonParser->String [arrowhead="vee",style="dashed"];HTMLViolateCompositionOverInheritanceClassParser->void [arrowhead="vee",style="dashed"];HTMLViolateCompositionOverInheritanceClassParser->IParser [arrowhead="vee",style="dashed"];HTMLViolateCompositionOverInheritanceClassParser->String [arrowhead="vee",style="dashed"];HTMLViolateCompositionOverInheritanceRelationshipParser->void [arrowhead="vee",style="dashed"];HTMLViolateCompositionOverInheritanceRelationshipParser->IParser [arrowhead="vee",style="dashed"];HTMLViolateCompositionOverInheritanceRelationshipParser->String [arrowhead="vee",style="dashed"];IParser->String [arrowhead="vee",style="dashed"];IParser->ModelObject [arrowhead="vee",style="dashed"];RelationshipParserDecorator->void [arrowhead="vee",style="dashed"];RelationshipParserDecorator->String [arrowhead="vee",style="dashed"];RelationshipParserDecorator->ModelObject [arrowhead="vee",style="dashed"];GraphVizRunner->void [arrowhead="vee",style="dashed"];GraphVizRunner->int [arrowhead="vee",style="dashed"];Runner->void [arrowhead="vee",style="dashed"];Runner->int [arrowhead="vee",style="dashed"];Runner->String [arrowhead="vee",style="dashed"];PatternDetector->ModelObject [arrowhead="vee",style="dashed",label="1..n"];SingletonDetector->void [arrowhead="vee",style="dashed"];SingletonDetector->ModelObject [arrowhead="vee",style="dashed",label="1..n"];ViolateCompositionOverInheritanceDetector->void [arrowhead="vee",style="dashed"];ViolateCompositionOverInheritanceDetector->ModelObject [arrowhead="vee",style="dashed",label="1..n"];ViolateCompositionOverInheritanceDetector->boolean [arrowhead="vee",style="dashed"];ViolateCompositionOverInheritanceDetector->String [arrowhead="vee",style="dashed"];EagerBoiler->void [arrowhead="vee",style="dashed"];LazyBoiler->void [arrowhead="vee",style="dashed"];ObjectOne->void [arrowhead="vee",style="dashed"];ObjectTwo->void [arrowhead="vee",style="dashed"];HTMLParserFactory[color=blue,shape = "record",label=<{singleton<br /> HTMLParserFactory|- instance : HTMLParserFactory<br/>|+ init() : void<br/>+ makeParser(String param, ) : IParser<br/>+ getInstance() : HTMLParserFactory<br/>}>];EagerBoiler[color=blue,shape = "record",label=<{singleton<br /> EagerBoiler|- instance : EagerBoiler<br/>|+ init() : void<br/>+ getInstance() : EagerBoiler<br/>- clinit() : void<br/>}>];LazyBoiler[color=blue,shape = "record",label=<{singleton<br /> LazyBoiler|- instance : LazyBoiler<br/>|+ init() : void<br/>+ getInstance() : LazyBoiler<br/>}>];}