digraph uml{rankdir=BT;splines=ortho;node[shape = box];DesignParser[shape = "record",label=<{ DesignParser|+ TYPE_HTML : String<br/>- factories : Map:String IParserFactory<br/>- iFactory : IParserFactory<br/>|+ init() : void<br/>+ parseObjects(List:ModelObject param, ) : String<br/>- parseModelObject(ModelObject param, ) : String<br/>+ addFactory(String param, IParserFactory param, ) : void<br/>+ setFactory(String param, ) : void<br/>- clinit() : void<br/>}>];Driver[shape = "record",label=<{ Driver|+ init() : void<br/>+ main(String[] param, ) : void<br/>}>];Modeler[shape = "record",label=<{ Modeler|- models : List:ModelObject<br/>- recursion : boolean<br/>- primitives : List:String<br/>- pds : List:PatternDetector<br/>- synthetic : boolean<br/>- blacklist : String[]<br/>|+ init() : void<br/>- createClassModel(String param, ) : void<br/>+ createClassModels(List:String param, ) : void<br/>- checkBlackList(String param, ) : boolean<br/>- checkIfPrimitive(String param, ) : boolean<br/>- getTypes(String param, ) : List:String<br/>- containsAssociation(Association param, List:ModelObject param, ) : boolean<br/>- containsDependency(Dependency param, List:ModelObject param, ) : boolean<br/>- getAssociations() : void<br/>- addAssociation(String param, ModelObject param, List:ModelObject param, ) : void<br/>- checkAssociations(String param, String param, ) : boolean<br/>- getDependencies() : void<br/>- addDependency(String param, ModelObject param, List:ModelObject param, ) : void<br/>- createInstanceVariableModels(List:FieldNode param, ) : List:ModelObject<br/>- createMethodModels(List:MethodNode param, ) : List:ModelObject<br/>+ setRecursion(boolean param, ) : void<br/>+ setSynthetic(boolean param, ) : void<br/>+ setBlacklist(String[] param, ) : void<br/>+ getModels() : List:ModelObject<br/>+ addPatternDetector(PatternDetector param, ) : void<br/>- detectPatterns() : void<br/>- parseParamGeneric(String param, ) : List:String<br/>- parseGeneric(String param, ) : String<br/>+ getRecursion() : boolean<br/>+ getBlacklist() : String[]<br/>+ getSynthetic() : boolean<br/>+ getPatternDetectors() : List:PatternDetector<br/>}>];TheGreatFacadeOfChandan[shape = "record",label=<{ TheGreatFacadeOfChandan|- runner : Runner<br/>- designParser : DesignParser<br/>- modeler : Modeler<br/>+ DEFAULT_SETTINGS : String<br/>- names : List:String<br/>- outputFile : String<br/>- encoding : String<br/>|+ init() : void<br/>+ initialize(String param, ) : void<br/>+ addPatternDetector(PatternDetector param, ) : void<br/>+ go() : void<br/>+ setOutputFile(String param, ) : void<br/>+ setEncoding(String param, ) : void<br/>+ getModeler() : Modeler<br/>+ getNames() : List:String<br/>+ getOutputFile() : String<br/>+ getEncoding() : String<br/>- clinit() : void<br/>}>];AbstractParserFactory->IParserFactory [arrowhead="onormal",style="dashed"];AbstractParserFactory[shape = "record",label=<{ <i>AbstractParserFactory</i>|- map : Map:String IParser<br/>|+ init() : void<br/>+ makeParser(String param, ) : IParser<br/>+ addParser(String param, IParser param, ) : void<br/>}>];HTMLParserFactory->AbstractParserFactory [arrowhead="onormal"];IParserFactory[shape = "record",label=<{<i>IParserFactory</i>|+ makeParser(String param, ) : IParser<br/>}>];Adaptee->PatternDecorator [arrowhead="onormal"];Adapter->PatternDecorator [arrowhead="onormal"];AdaptsRelationship->PatternDecorator [arrowhead="onormal"];Association->IRelationship [arrowhead="onormal"];Association[shape = "record",label=<{ <i>Association</i>|+ init(String param, String param, ) : void<br/>+ isOpposite(Association param, ) : boolean<br/>+ isEqual(Object param, ) : boolean<br/>}>];Component->PatternDecorator [arrowhead="onormal"];DecoratesRelationship->PatternDecorator [arrowhead="onormal"];Decorator->PatternDecorator [arrowhead="onormal"];Dependency->IRelationship [arrowhead="onormal"];Dependency[shape = "record",label=<{ <i>Dependency</i>|+ init(String param, String param, ) : void<br/>+ isOpposite(Dependency param, ) : boolean<br/>+ isEqual(ModelObject param, ) : boolean<br/>}>];Extend->IRelationship [arrowhead="onormal"];Extend[shape = "record",label=<{ Extend|+ init(String param, String param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];Implement->IRelationship [arrowhead="onormal"];Implement[shape = "record",label=<{ Implement|+ init(String param, String param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];IRelationship->ModelObject [arrowhead="onormal",style="dashed"];IRelationship[shape = "record",label=<{ <i>IRelationship</i>|- pair : String[]<br/>|+ init(String param, String param, ) : void<br/>+ getFirst() : String<br/>+ getSecond() : String<br/>+ toString() : String<br/>}>];OneToManyAssociation->Association [arrowhead="onormal"];OneToManyAssociation[shape = "record",label=<{ OneToManyAssociation|+ init(String param, String param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];OneToManyDependency->Dependency [arrowhead="onormal"];OneToManyDependency[shape = "record",label=<{ OneToManyDependency|+ init(String param, String param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];OneToOneAssociation->Association [arrowhead="onormal"];OneToOneAssociation[shape = "record",label=<{ OneToOneAssociation|+ init(String param, String param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];OneToOneDependency->Dependency [arrowhead="onormal"];OneToOneDependency[shape = "record",label=<{ OneToOneDependency|+ init(String param, String param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];Singleton->PatternDecorator [arrowhead="onormal"];Target->PatternDecorator [arrowhead="onormal"];UMLAbstractClass->ModelObject [arrowhead="onormal",style="dashed"];UMLAbstractClass[shape = "record",label=<{ UMLAbstractClass|- methods : List:UMLMethod<br/>- instVars : List:UMLInstanceVariable<br/>- name : String<br/>|+ init(String param, List:UMLMethod param, List:UMLInstanceVariable param, ) : void<br/>+ getMethods() : List:UMLMethod<br/>+ getInstanceVars() : List:UMLInstanceVariable<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];UMLClass->ModelObject [arrowhead="onormal",style="dashed"];UMLClass[shape = "record",label=<{ UMLClass|- methods : List:UMLMethod<br/>- instVars : List:UMLInstanceVariable<br/>- name : String<br/>|+ init(String param, List:UMLMethod param, List:UMLInstanceVariable param, ) : void<br/>+ getMethods() : List:UMLMethod<br/>+ getInstanceVars() : List:UMLInstanceVariable<br/>+ addMethod(UMLMethod param, ) : void<br/>+ toString() : String<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];UMLInstanceVariable->ModelObject [arrowhead="onormal",style="dashed"];UMLInstanceVariable[shape = "record",label=<{ UMLInstanceVariable|- type : String<br/>- name : String<br/>- isPublic : boolean<br/>- isStatic : boolean<br/>|+ init(String param, String param, boolean param, boolean param, ) : void<br/>+ getName() : String<br/>+ getParsedName() : String<br/>+ getType() : String<br/>+ getParsedType() : String<br/>+ toString() : String<br/>+ getIsPublic() : boolean<br/>+ getIsStatic() : boolean<br/>+ getSelector() : String<br/>}>];UMLInterface->ModelObject [arrowhead="onormal",style="dashed"];UMLInterface[shape = "record",label=<{ UMLInterface|- methods : List:UMLMethod<br/>- name : String<br/>|+ init(String param, List:UMLMethod param, ) : void<br/>+ getMethods() : List:UMLMethod<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];UMLMethod->ModelObject [arrowhead="onormal",style="dashed"];UMLMethod[shape = "record",label=<{ UMLMethod|- sig : String<br/>- returnType : String<br/>- params : List:UMLParameter<br/>- inLineDependencies : List:String<br/>- instructions : InsnList<br/>- isPublic : boolean<br/>- isStatic : boolean<br/>|+ init(String param, String param, List:UMLParameter param, List:String param, InsnList param, ) : void<br/>+ getInLineDependencies() : List:String<br/>+ getSignature() : String<br/>+ getReturnType() : String<br/>+ getParsedReturnType() : String<br/>+ getParameters() : List:UMLParameter<br/>+ toString() : String<br/>+ getName() : String<br/>+ getIsPublic() : boolean<br/>+ getIsStatic() : boolean<br/>+ getSelector() : String<br/>+ getInstructions() : InsnList<br/>}>];UMLParameter->ModelObject [arrowhead="onormal",style="dashed"];UMLParameter[shape = "record",label=<{ UMLParameter|- type : String<br/>- name : String<br/>|+ init(String param, String param, ) : void<br/>+ toString() : String<br/>+ getName() : String<br/>+ getType() : String<br/>+ getSelector() : String<br/>}>];ViolateCompositionOverInheritance->PatternDecorator [arrowhead="onormal"];ViolateDependencyInversion->PatternDecorator [arrowhead="onormal"];HTMLAbstractClassParser->IParser [arrowhead="onormal",style="dashed"];HTMLAbstractClassParser[shape = "record",label=<{ HTMLAbstractClassParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLAdapteeParser->ClassParserDecorator [arrowhead="onormal"];HTMLAdapterParser->ClassParserDecorator [arrowhead="onormal"];HTMLAdaptsRelationshipParser->RelationshipParserDecorator [arrowhead="onormal"];HTMLClassParser->IParser [arrowhead="onormal",style="dashed"];HTMLClassParser[shape = "record",label=<{ HTMLClassParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLComponentParser->ClassParserDecorator [arrowhead="onormal"];HTMLDecoratesRelationshipParser->RelationshipParserDecorator [arrowhead="onormal"];HTMLDecoratorParser->ClassParserDecorator [arrowhead="onormal"];HTMLExtendParser->IParser [arrowhead="onormal",style="dashed"];HTMLExtendParser[shape = "record",label=<{ HTMLExtendParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLImplementParser->IParser [arrowhead="onormal",style="dashed"];HTMLImplementParser[shape = "record",label=<{ HTMLImplementParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLInstanceVariableParser->IParser [arrowhead="onormal",style="dashed"];HTMLInstanceVariableParser[shape = "record",label=<{ HTMLInstanceVariableParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLInterfaceParser->IParser [arrowhead="onormal",style="dashed"];HTMLInterfaceParser[shape = "record",label=<{ HTMLInterfaceParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLMethodParser->IParser [arrowhead="onormal",style="dashed"];HTMLMethodParser[shape = "record",label=<{ HTMLMethodParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLOneToManyAssociationParser->IParser [arrowhead="onormal",style="dashed"];HTMLOneToManyAssociationParser[shape = "record",label=<{ HTMLOneToManyAssociationParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLOneToManyDependencyParser->IParser [arrowhead="onormal",style="dashed"];HTMLOneToManyDependencyParser[shape = "record",label=<{ HTMLOneToManyDependencyParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLOneToOneAssociationParser->IParser [arrowhead="onormal",style="dashed"];HTMLOneToOneAssociationParser[shape = "record",label=<{ HTMLOneToOneAssociationParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLOneToOneDependencyParser->IParser [arrowhead="onormal",style="dashed"];HTMLOneToOneDependencyParser[shape = "record",label=<{ HTMLOneToOneDependencyParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLParameterParser->IParser [arrowhead="onormal",style="dashed"];HTMLParameterParser[shape = "record",label=<{ HTMLParameterParser|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>}>];HTMLSingletonParser->ClassParserDecorator [arrowhead="onormal"];HTMLTargetParser->ClassParserDecorator [arrowhead="onormal"];HTMLViolateCompositionOverInheritanceClassParser->ClassParserDecorator [arrowhead="onormal"];HTMLViolateCompositionOverInheritanceRelationshipParser->RelationshipParserDecorator [arrowhead="onormal"];HTMLViolateDependencyInversionRelationshipParser->RelationshipParserDecorator [arrowhead="onormal"];GraphVizRunner->Runner [arrowhead="onormal",style="dashed"];GraphVizRunner[shape = "record",label=<{ GraphVizRunner|- inputFile : String<br/>|+ init(String param, ) : void<br/>+ launchApp() : void<br/>+ writeToFile(String param, ) : int<br/>}>];Runner[shape = "record",label=<{<i>Runner</i>|+ launchApp() : void<br/>+ writeToFile(String param, ) : int<br/>}>];AdapterDetector->PatternDetector [arrowhead="onormal",style="dashed"];AdapterDetector[shape = "record",label=<{ AdapterDetector|+ init() : void<br/>+ check(List:ModelObject param, ) : List:ModelObject<br/>- getRest(List:ModelObject param, List:ModelObject param, ) : List:ModelObject<br/>- getAdaptees(List:ModelObject param, List:ModelObject param, ) : List:Adaptee<br/>- checkAssociation(String param, List:ModelObject param, ) : List:ModelObject<br/>- containsMethod(UMLMethod param, List:UMLMethod param, ) : boolean<br/>- getAssociations(String param, List:ModelObject param, ) : List:ModelObject<br/>- findAncestor(UMLClass param, List:ModelObject param, ) : String<br/>- getAncestor(String param, List:ModelObject param, ) : ModelObject<br/>}>];DecoratorDetector->PatternDetector [arrowhead="onormal",style="dashed"];DecoratorDetector[shape = "record",label=<{ DecoratorDetector|+ init() : void<br/>+ check(List:ModelObject param, ) : List:ModelObject<br/>- getRest(List:ModelObject param, List:ModelObject param, ) : List:ModelObject<br/>- checkInDecorator(ModelObject param, List:ModelObject param, ) : boolean<br/>- getRelationship(UMLAbstractClass param, String param, List:ModelObject param, ) : ModelObject<br/>- findAncestor(UMLAbstractClass param, List:ModelObject param, ) : String<br/>- getAncestor(String param, List:ModelObject param, ) : ModelObject<br/>- getChildren(ModelObject param, List:ModelObject param, ) : List:ModelObject<br/>- findClass(String param, List:ModelObject param, ) : ModelObject<br/>}>];PatternDetector[shape = "record",label=<{<i>PatternDetector</i>|+ check(List:ModelObject param, ) : List:ModelObject<br/>}>];SingletonDetector->PatternDetector [arrowhead="onormal",style="dashed"];SingletonDetector[shape = "record",label=<{ SingletonDetector|+ init() : void<br/>+ check(List:ModelObject param, ) : List:ModelObject<br/>}>];ViolateCompositionOverInheritanceDetector->PatternDetector [arrowhead="onormal",style="dashed"];ViolateCompositionOverInheritanceDetector[shape = "record",label=<{ ViolateCompositionOverInheritanceDetector|+ init() : void<br/>+ check(List:ModelObject param, ) : List:ModelObject<br/>- getWrappedObjects(ModelObject param, List:ModelObject param, ) : List:ModelObject<br/>- checkViolate(String param, List:ModelObject param, ) : boolean<br/>}>];ViolateDependencyInversionDetector->PatternDetector [arrowhead="onormal",style="dashed"];ViolateDependencyInversionDetector[shape = "record",label=<{ ViolateDependencyInversionDetector|+ init() : void<br/>+ check(List:ModelObject param, ) : List:ModelObject<br/>+ findObject(String param, List:ModelObject param, ) : ModelObject<br/>}>];ObjectOne[shape = "record",label=<{ ObjectOne|+ init() : void<br/>+ blah() : void<br/>}>];ObjectOne[color=orange,shape = "record",label=<{ ObjectOne|+ init() : void<br/>+ blah() : void<br/>}>];ObjectTwo[color=orange,shape = "record",label=<{ ObjectTwo|+ init() : void<br/>+ get() : void<br/>}>];ObjectTwo->ObjectOne [color=orange arrowhead="onormal"];ObjectTwo[shape = "record",label=<{ ObjectTwo|+ init() : void<br/>+ get() : void<br/>}>];DesignParser->IParserFactory [arrowhead="vee",label="1..n"];Modeler->ModelObject [arrowhead="vee",label="1..n"];Modeler->PatternDetector [arrowhead="vee",label="1..n"];TheGreatFacadeOfChandan->Runner [arrowhead="vee"];TheGreatFacadeOfChandan->DesignParser [color=magenta arrowhead="vee"];TheGreatFacadeOfChandan->Modeler [color=magenta arrowhead="vee"];AbstractParserFactory->IParser [arrowhead="vee",label="1..n"];HTMLParserFactory->HTMLParserFactory [arrowhead="vee"];PatternDecorator->ModelObject [arrowhead="vee"];UMLAbstractClass->UMLMethod [color=magenta arrowhead="vee",label="1..n"];UMLAbstractClass->UMLInstanceVariable [color=magenta arrowhead="vee",label="1..n"];UMLClass->UMLMethod [color=magenta arrowhead="vee",label="1..n"];UMLClass->UMLInstanceVariable [color=magenta arrowhead="vee",label="1..n"];UMLInterface->UMLMethod [color=magenta arrowhead="vee",label="1..n"];UMLMethod->UMLParameter [color=magenta arrowhead="vee",label="1..n"];UMLMethod->InsnList [arrowhead="vee"];ClassParserDecorator->IParser [arrowhead="vee"];RelationshipParserDecorator->IParser [arrowhead="vee"];EagerSingleton->EagerSingleton [arrowhead="vee"];LazySingleton->LazySingleton [arrowhead="vee"];DesignParser->HTMLParserFactory [arrowhead="vee",style="dashed"];DesignParser->ModelObject [arrowhead="vee",style="dashed",label="1..n"];DesignParser->DesignParser [color=magenta arrowhead="vee",style="dashed"];DesignParser->IParser [arrowhead="vee",style="dashed"];Driver->TheGreatFacadeOfChandan [color=magenta arrowhead="vee",style="dashed"];Driver->SingletonDetector [color=magenta arrowhead="vee",style="dashed"];Driver->ViolateCompositionOverInheritanceDetector [color=magenta arrowhead="vee",style="dashed"];Driver->DecoratorDetector [color=magenta arrowhead="vee",style="dashed"];Driver->ViolateDependencyInversionDetector [color=magenta arrowhead="vee",style="dashed"];Driver->AdapterDetector [color=magenta arrowhead="vee",style="dashed"];Modeler->Modeler [color=magenta arrowhead="vee",style="dashed"];Modeler->ClassReader [arrowhead="vee",style="dashed"];Modeler->ClassNode [arrowhead="vee",style="dashed"];Modeler->Extend [color=magenta arrowhead="vee",style="dashed"];Modeler->Implement [color=magenta arrowhead="vee",style="dashed"];Modeler->UMLInterface [color=magenta arrowhead="vee",style="dashed"];Modeler->UMLAbstractClass [color=magenta arrowhead="vee",style="dashed"];Modeler->UMLClass [color=magenta arrowhead="vee",style="dashed"];Modeler->Association [arrowhead="vee",style="dashed"];Modeler->Dependency [arrowhead="vee",style="dashed"];Modeler->UMLInstanceVariable [color=magenta arrowhead="vee",style="dashed"];Modeler->OneToManyAssociation [color=magenta arrowhead="vee",style="dashed"];Modeler->OneToOneAssociation [color=magenta arrowhead="vee",style="dashed"];Modeler->UMLMethod [color=magenta arrowhead="vee",style="dashed"];Modeler->UMLParameter [color=magenta arrowhead="vee",style="dashed"];Modeler->OneToManyDependency [color=magenta arrowhead="vee",style="dashed"];Modeler->OneToOneDependency [color=magenta arrowhead="vee",style="dashed"];Modeler->FieldNode [arrowhead="vee",style="dashed",label="1..n"];Modeler->Type [arrowhead="vee",style="dashed"];Modeler->MethodNode [arrowhead="vee",style="dashed",label="1..n"];Modeler->InsnList [arrowhead="vee",style="dashed"];Modeler->AbstractInsnNode [arrowhead="vee",style="dashed"];TheGreatFacadeOfChandan->PatternDetector [arrowhead="vee",style="dashed"];TheGreatFacadeOfChandan->GraphVizRunner [color=magenta arrowhead="vee",style="dashed"];HTMLParserFactory->AbstractParserFactory [arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLClassParser [color=magenta arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLAbstractClassParser [color=magenta arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLInterfaceParser [color=magenta arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLMethodParser [color=magenta arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLInstanceVariableParser [color=magenta arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLParameterParser [color=magenta arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLExtendParser [color=magenta arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLImplementParser [color=magenta arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLOneToOneAssociationParser [color=magenta arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLOneToManyAssociationParser [color=magenta arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLOneToOneDependencyParser [color=magenta arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLOneToManyDependencyParser [color=magenta arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLSingletonParser [arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLViolateCompositionOverInheritanceClassParser [arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLViolateCompositionOverInheritanceRelationshipParser [arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLDecoratorParser [arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLDecoratesRelationshipParser [arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLComponentParser [arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLViolateDependencyInversionRelationshipParser [arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLTargetParser [arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLAdapteeParser [arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLAdaptsRelationshipParser [arrowhead="vee",style="dashed"];HTMLParserFactory->HTMLAdapterParser [arrowhead="vee",style="dashed"];HTMLParserFactory->IParser [arrowhead="vee",style="dashed"];IParserFactory->IParser [arrowhead="vee",style="dashed"];Adaptee->ModelObject [arrowhead="vee",style="dashed"];Adaptee->PatternDecorator [arrowhead="vee",style="dashed"];Adapter->ModelObject [arrowhead="vee",style="dashed"];Adapter->PatternDecorator [arrowhead="vee",style="dashed"];AdaptsRelationship->ModelObject [arrowhead="vee",style="dashed"];AdaptsRelationship->PatternDecorator [arrowhead="vee",style="dashed"];Association->IRelationship [arrowhead="vee",style="dashed"];Association->Association [arrowhead="vee",style="dashed"];Component->ModelObject [arrowhead="vee",style="dashed"];Component->PatternDecorator [arrowhead="vee",style="dashed"];DecoratesRelationship->IRelationship [arrowhead="vee",style="dashed"];DecoratesRelationship->PatternDecorator [arrowhead="vee",style="dashed"];DecoratesRelationship->ModelObject [arrowhead="vee",style="dashed"];Decorator->ModelObject [arrowhead="vee",style="dashed"];Decorator->PatternDecorator [arrowhead="vee",style="dashed"];Dependency->IRelationship [arrowhead="vee",style="dashed"];Dependency->Dependency [arrowhead="vee",style="dashed"];Dependency->ModelObject [arrowhead="vee",style="dashed"];Extend->IRelationship [arrowhead="vee",style="dashed"];Implement->IRelationship [arrowhead="vee",style="dashed"];OneToManyAssociation->Association [arrowhead="vee",style="dashed"];OneToManyDependency->Dependency [arrowhead="vee",style="dashed"];OneToOneAssociation->Association [arrowhead="vee",style="dashed"];OneToOneDependency->Dependency [arrowhead="vee",style="dashed"];Singleton->ModelObject [arrowhead="vee",style="dashed"];Singleton->PatternDecorator [arrowhead="vee",style="dashed"];Target->ModelObject [arrowhead="vee",style="dashed"];Target->PatternDecorator [arrowhead="vee",style="dashed"];ViolateCompositionOverInheritance->ModelObject [arrowhead="vee",style="dashed"];ViolateCompositionOverInheritance->PatternDecorator [arrowhead="vee",style="dashed"];ViolateDependencyInversion->ModelObject [arrowhead="vee",style="dashed"];ViolateDependencyInversion->PatternDecorator [arrowhead="vee",style="dashed"];ClassParserDecorator->ModelObject [arrowhead="vee",style="dashed"];ClassParserDecorator->PatternDecorator [arrowhead="vee",style="dashed"];ClassParserDecorator->ClassParserDecorator [arrowhead="vee",style="dashed"];HTMLAbstractClassParser->ModelObject [arrowhead="vee",style="dashed"];HTMLAbstractClassParser->UMLAbstractClass [color=magenta arrowhead="vee",style="dashed"];HTMLAbstractClassParser->HTMLParserFactory [arrowhead="vee",style="dashed"];HTMLAbstractClassParser->UMLInstanceVariable [color=magenta arrowhead="vee",style="dashed"];HTMLAbstractClassParser->IParser [arrowhead="vee",style="dashed"];HTMLAbstractClassParser->UMLMethod [color=magenta arrowhead="vee",style="dashed"];HTMLAdapteeParser->IParser [arrowhead="vee",style="dashed"];HTMLAdapteeParser->ClassParserDecorator [arrowhead="vee",style="dashed"];HTMLAdapterParser->IParser [arrowhead="vee",style="dashed"];HTMLAdapterParser->ClassParserDecorator [arrowhead="vee",style="dashed"];HTMLAdaptsRelationshipParser->IParser [arrowhead="vee",style="dashed"];HTMLAdaptsRelationshipParser->RelationshipParserDecorator [arrowhead="vee",style="dashed"];HTMLClassParser->ModelObject [arrowhead="vee",style="dashed"];HTMLClassParser->UMLClass [color=magenta arrowhead="vee",style="dashed"];HTMLClassParser->HTMLParserFactory [arrowhead="vee",style="dashed"];HTMLClassParser->UMLInstanceVariable [color=magenta arrowhead="vee",style="dashed"];HTMLClassParser->IParser [arrowhead="vee",style="dashed"];HTMLClassParser->UMLMethod [color=magenta arrowhead="vee",style="dashed"];HTMLComponentParser->IParser [arrowhead="vee",style="dashed"];HTMLComponentParser->ClassParserDecorator [arrowhead="vee",style="dashed"];HTMLDecoratesRelationshipParser->IParser [arrowhead="vee",style="dashed"];HTMLDecoratesRelationshipParser->RelationshipParserDecorator [arrowhead="vee",style="dashed"];HTMLDecoratorParser->IParser [arrowhead="vee",style="dashed"];HTMLDecoratorParser->ClassParserDecorator [arrowhead="vee",style="dashed"];HTMLExtendParser->ModelObject [arrowhead="vee",style="dashed"];HTMLExtendParser->Extend [color=magenta arrowhead="vee",style="dashed"];HTMLImplementParser->ModelObject [arrowhead="vee",style="dashed"];HTMLImplementParser->Implement [color=magenta arrowhead="vee",style="dashed"];HTMLInstanceVariableParser->ModelObject [arrowhead="vee",style="dashed"];HTMLInstanceVariableParser->UMLInstanceVariable [color=magenta arrowhead="vee",style="dashed"];HTMLInterfaceParser->ModelObject [arrowhead="vee",style="dashed"];HTMLInterfaceParser->UMLInterface [color=magenta arrowhead="vee",style="dashed"];HTMLInterfaceParser->HTMLParserFactory [arrowhead="vee",style="dashed"];HTMLInterfaceParser->UMLMethod [color=magenta arrowhead="vee",style="dashed"];HTMLInterfaceParser->IParser [arrowhead="vee",style="dashed"];HTMLMethodParser->ModelObject [arrowhead="vee",style="dashed"];HTMLMethodParser->UMLMethod [color=magenta arrowhead="vee",style="dashed"];HTMLMethodParser->HTMLParserFactory [arrowhead="vee",style="dashed"];HTMLMethodParser->UMLParameter [color=magenta arrowhead="vee",style="dashed"];HTMLMethodParser->IParser [arrowhead="vee",style="dashed"];HTMLOneToManyAssociationParser->ModelObject [arrowhead="vee",style="dashed"];HTMLOneToManyAssociationParser->OneToManyAssociation [color=magenta arrowhead="vee",style="dashed"];HTMLOneToManyDependencyParser->ModelObject [arrowhead="vee",style="dashed"];HTMLOneToManyDependencyParser->OneToManyDependency [color=magenta arrowhead="vee",style="dashed"];HTMLOneToOneAssociationParser->ModelObject [arrowhead="vee",style="dashed"];HTMLOneToOneAssociationParser->OneToOneAssociation [color=magenta arrowhead="vee",style="dashed"];HTMLOneToOneDependencyParser->ModelObject [arrowhead="vee",style="dashed"];HTMLOneToOneDependencyParser->OneToOneDependency [color=magenta arrowhead="vee",style="dashed"];HTMLParameterParser->ModelObject [arrowhead="vee",style="dashed"];HTMLParameterParser->UMLParameter [color=magenta arrowhead="vee",style="dashed"];HTMLSingletonParser->IParser [arrowhead="vee",style="dashed"];HTMLSingletonParser->ClassParserDecorator [arrowhead="vee",style="dashed"];HTMLTargetParser->IParser [arrowhead="vee",style="dashed"];HTMLTargetParser->ClassParserDecorator [arrowhead="vee",style="dashed"];HTMLViolateCompositionOverInheritanceClassParser->IParser [arrowhead="vee",style="dashed"];HTMLViolateCompositionOverInheritanceClassParser->ClassParserDecorator [arrowhead="vee",style="dashed"];HTMLViolateCompositionOverInheritanceRelationshipParser->IParser [arrowhead="vee",style="dashed"];HTMLViolateCompositionOverInheritanceRelationshipParser->RelationshipParserDecorator [arrowhead="vee",style="dashed"];HTMLViolateDependencyInversionRelationshipParser->IParser [arrowhead="vee",style="dashed"];HTMLViolateDependencyInversionRelationshipParser->RelationshipParserDecorator [arrowhead="vee",style="dashed"];IParser->ModelObject [arrowhead="vee",style="dashed"];RelationshipParserDecorator->ModelObject [arrowhead="vee",style="dashed"];RelationshipParserDecorator->PatternDecorator [arrowhead="vee",style="dashed"];RelationshipParserDecorator->RelationshipParserDecorator [arrowhead="vee",style="dashed"];AdapterDetector->ModelObject [arrowhead="vee",style="dashed",label="1..n"];AdapterDetector->AdapterDetector [color=magenta arrowhead="vee",style="dashed"];AdapterDetector->UMLClass [color=magenta arrowhead="vee",style="dashed"];AdapterDetector->UMLInterface [color=magenta arrowhead="vee",style="dashed"];AdapterDetector->UMLMethod [color=magenta arrowhead="vee",style="dashed"];AdapterDetector->InsnList [arrowhead="vee",style="dashed"];AdapterDetector->AbstractInsnNode [arrowhead="vee",style="dashed"];AdapterDetector->Adapter [arrowhead="vee",style="dashed"];AdapterDetector->Target [arrowhead="vee",style="dashed"];AdapterDetector->AdaptsRelationship [arrowhead="vee",style="dashed"];AdapterDetector->PatternDecorator [arrowhead="vee",style="dashed"];AdapterDetector->Adaptee [arrowhead="vee",style="dashed",label="1..n"];AdapterDetector->Association [arrowhead="vee",style="dashed"];AdapterDetector->IRelationship [arrowhead="vee",style="dashed"];AdapterDetector->Implement [color=magenta arrowhead="vee",style="dashed"];DecoratorDetector->ModelObject [arrowhead="vee",style="dashed",label="1..n"];DecoratorDetector->DecoratorDetector [color=magenta arrowhead="vee",style="dashed"];DecoratorDetector->UMLAbstractClass [color=magenta arrowhead="vee",style="dashed"];DecoratorDetector->UMLInstanceVariable [color=magenta arrowhead="vee",style="dashed"];DecoratorDetector->Decorator [arrowhead="vee",style="dashed"];DecoratorDetector->PatternDecorator [arrowhead="vee",style="dashed"];DecoratorDetector->Implement [color=magenta arrowhead="vee",style="dashed"];DecoratorDetector->DecoratesRelationship [arrowhead="vee",style="dashed"];DecoratorDetector->Component [arrowhead="vee",style="dashed"];DecoratorDetector->Extend [color=magenta arrowhead="vee",style="dashed"];PatternDetector->ModelObject [arrowhead="vee",style="dashed",label="1..n"];SingletonDetector->ModelObject [arrowhead="vee",style="dashed",label="1..n"];SingletonDetector->UMLClass [color=magenta arrowhead="vee",style="dashed"];SingletonDetector->UMLInstanceVariable [color=magenta arrowhead="vee",style="dashed"];SingletonDetector->Singleton [color=magenta arrowhead="vee",style="dashed"];SingletonDetector->UMLMethod [color=magenta arrowhead="vee",style="dashed"];ViolateCompositionOverInheritanceDetector->ModelObject [arrowhead="vee",style="dashed",label="1..n"];ViolateCompositionOverInheritanceDetector->IRelationship [arrowhead="vee",style="dashed"];ViolateCompositionOverInheritanceDetector->ViolateCompositionOverInheritanceDetector [color=magenta arrowhead="vee",style="dashed"];ViolateCompositionOverInheritanceDetector->ViolateCompositionOverInheritance [color=magenta arrowhead="vee",style="dashed"];ViolateDependencyInversionDetector->ModelObject [arrowhead="vee",style="dashed",label="1..n"];ViolateDependencyInversionDetector->IRelationship [arrowhead="vee",style="dashed"];ViolateDependencyInversionDetector->ViolateDependencyInversionDetector [color=magenta arrowhead="vee",style="dashed"];ViolateDependencyInversionDetector->ViolateDependencyInversion [arrowhead="vee",style="dashed"];ObjectTwo->ObjectOne [color=magenta arrowhead="vee",style="dashed"];HTMLParserFactory[color=blue,shape = "record",label=<{singleton<br /> HTMLParserFactory|- instance : HTMLParserFactory<br/>|+ init() : void<br/>+ makeParser(String param, ) : IParser<br/>+ getInstance() : HTMLParserFactory<br/>}>];EagerSingleton[color=blue,shape = "record",label=<{singleton<br /> EagerSingleton|- instance : EagerSingleton<br/>|+ init() : void<br/>+ getInstance() : EagerSingleton<br/>- clinit() : void<br/>}>];LazySingleton[color=blue,shape = "record",label=<{singleton<br /> LazySingleton|- instance : LazySingleton<br/>|+ init() : void<br/>+ getInstance() : LazySingleton<br/>}>];PatternDecorator[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> <i>PatternDecorator</i>|- underlying : ModelObject<br/>|+ init() : void<br/>+ getName() : String<br/>+ getUnderlying() : ModelObject<br/>+ contains(ModelObject param, ) : boolean<br/>}>];Adaptee[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> Adaptee|+ init(ModelObject param, ) : void<br/>+ getSelector() : String<br/>+ getName() : String<br/>}>];Adapter[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> Adapter|+ init(ModelObject param, ) : void<br/>+ getSelector() : String<br/>+ getName() : String<br/>}>];AdaptsRelationship[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> AdaptsRelationship|+ init(ModelObject param, ) : void<br/>+ getSelector() : String<br/>+ getName() : String<br/>}>];Component[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> Component|+ init(ModelObject param, ) : void<br/>+ getSelector() : String<br/>+ getName() : String<br/>}>];DecoratesRelationship[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> DecoratesRelationship|+ init(IRelationship param, ) : void<br/>+ getSelector() : String<br/>+ getName() : String<br/>}>];Decorator[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> Decorator|+ init(ModelObject param, ) : void<br/>+ getSelector() : String<br/>+ getName() : String<br/>}>];Singleton[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> Singleton|+ init(ModelObject param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];Target[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> Target|+ init(ModelObject param, ) : void<br/>+ getSelector() : String<br/>+ getName() : String<br/>}>];ViolateCompositionOverInheritance[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> ViolateCompositionOverInheritance|+ init(ModelObject param, ) : void<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];ViolateDependencyInversion[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> ViolateDependencyInversion|+ init(ModelObject param, ) : void<br/>+ getSelector() : String<br/>+ getName() : String<br/>}>];ModelObject[style=filled,fillcolor=green,shape = "record",label=<{component<br /><i>ModelObject</i>|+ toString() : String<br/>+ getName() : String<br/>+ getSelector() : String<br/>}>];PatternDecorator->ModelObject [label="decorates" arrowhead="onormal",style="dashed"];ClassParserDecorator[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> <i>ClassParserDecorator</i>|- underlying : IParser<br/>|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>+ addConfig() : String<br/>+ addHeader() : String<br/>}>];HTMLAdapteeParser[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> HTMLAdapteeParser|+ init(IParser param, ) : void<br/>+ addConfig() : String<br/>+ addHeader() : String<br/>}>];HTMLAdapterParser[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> HTMLAdapterParser|+ init(IParser param, ) : void<br/>+ addConfig() : String<br/>+ addHeader() : String<br/>}>];HTMLComponentParser[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> HTMLComponentParser|+ init(IParser param, ) : void<br/>+ addConfig() : String<br/>+ addHeader() : String<br/>}>];HTMLDecoratorParser[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> HTMLDecoratorParser|+ init(IParser param, ) : void<br/>+ addConfig() : String<br/>+ addHeader() : String<br/>}>];HTMLSingletonParser[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> HTMLSingletonParser|+ init(IParser param, ) : void<br/>+ addConfig() : String<br/>+ addHeader() : String<br/>}>];HTMLTargetParser[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> HTMLTargetParser|+ init(IParser param, ) : void<br/>+ addConfig() : String<br/>+ addHeader() : String<br/>}>];HTMLViolateCompositionOverInheritanceClassParser[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> HTMLViolateCompositionOverInheritanceClassParser|+ init(IParser param, ) : void<br/>+ addConfig() : String<br/>+ addHeader() : String<br/>}>];IParser[style=filled,fillcolor=green,shape = "record",label=<{component<br /><i>IParser</i>|+ parse(ModelObject param, ) : String<br/>}>];ClassParserDecorator->IParser [label="decorates" arrowhead="onormal",style="dashed"];RelationshipParserDecorator[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> <i>RelationshipParserDecorator</i>|- underlying : IParser<br/>|+ init() : void<br/>+ parse(ModelObject param, ) : String<br/>+ addConfig() : String<br/>}>];HTMLAdaptsRelationshipParser[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> HTMLAdaptsRelationshipParser|+ init(IParser param, ) : void<br/>+ addConfig() : String<br/>}>];HTMLDecoratesRelationshipParser[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> HTMLDecoratesRelationshipParser|+ init(IParser param, ) : void<br/>+ addConfig() : String<br/>}>];HTMLViolateCompositionOverInheritanceRelationshipParser[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> HTMLViolateCompositionOverInheritanceRelationshipParser|+ init(IParser param, ) : void<br/>+ addConfig() : String<br/>}>];HTMLViolateDependencyInversionRelationshipParser[style=filled,fillcolor=green,shape = "record",label=<{decorator<br /> HTMLViolateDependencyInversionRelationshipParser|+ init(IParser param, ) : void<br/>+ addConfig() : String<br/>}>];IParser[style=filled,fillcolor=green,shape = "record",label=<{component<br /><i>IParser</i>|+ parse(ModelObject param, ) : String<br/>}>];RelationshipParserDecorator->IParser [label="decorates" arrowhead="onormal",style="dashed"];}