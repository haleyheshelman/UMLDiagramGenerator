/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'rupakhet' at '12/2/16 12:19 PM' with Gradle 3.0
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

// TODO: Change this to the class that has the main method of your application
mainClassName = "Drivers.Driver"

// TODO: Update the args value to choose what classes to run. Here is just an example. 
run {
   //args 	"problem.ILineParser", "problem.GoogleLineParser", "problem.AmazonLineParser","problem.DataStandardizer", "problem.GrouponLineParser", "problem.MicrosoftLineParser"
   //args	"java.lang.String"
   //args	"javax.swing.JComponent"
   //args	"Drivers", "Factories", "ModelObjects", "Parsers", "Runners", "PatternDetectors", "p"
   //args	"af", "fm", "pizza", "p"
   //args	"problem", "p"
   //args	"Testers", "p"
   //args "javax.swing.JFrame"
   //args "PatternDetectors", "p"
}

sourceCompatibility = 1.8
version = "1.0.0-SNAPSHOT"

// In this section you declare where to find the dependencies of your project
repositories {
    maven {
        url "https://maven.csse.rose-hulman.edu/artifactory/libs-release"
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
	// The production code uses asm core library
	compile group: 'org.ow2.asm', name: 'asm-all', version: '5.0.+'

    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    testCompile 'junit:junit:4.+'
    
    //runtime files('/Users/IceTheories/Documents/workspaceNeon/Lab1-1/bin')
    //runtime files('/Users/IceTheories/Documents/workspaceNeon/Lab3-1/bin')
    //runtime files('/Users/IceTheories/Documents/workspaceNeon/Lab1-2/bin')

    
    
}

// Code coverage analyzer
jacoco {
	toolVersion = "0.7.+"
}
jacocoTestReport {
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
	additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
	
	reports {
		xml.enabled true
		csv.enabled false
		html.enabled true
	}
}
test {
	jacoco {
		append = false
	}
}
test.finalizedBy(jacocoTestReport)
task codeCoverageInfo (dependsOn: jacocoTestReport) {
	ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
	doLast {
		println "Transforming source file."
		
		def parser = new XmlParser()
		parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false);
		parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
		parser.setFeature("http://xml.org/sax/features/namespaces", false)
				  
		def reportNode = parser.parse(srcFile)
		reportNode.children().each {
			if(it.name() == 'counter') {
				String type = it.@type
				float missed = it.@missed as float
				float covered = it.@covered as float
				float percentage = covered / (missed + covered) * 100
				println "Code Coverage[$type]: $percentage%"
			}
		}
	}
}
jacocoTestReport.finalizedBy(codeCoverageInfo)

jar {
    manifest {
        attributes "Implementation-Title": "Rose-Hulman Design Parser",
                "Implementation-Version": "${version}"
    }
}
